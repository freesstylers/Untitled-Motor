// Bump map with Parallax offset vertex program, support for this is required 
vertex_program Examples/OffsetMappingVP/HLSL hlsl
{ 
   source OffsetMapping.cg 
   entry_point main_vp 
   target vs_2_0
} 

// Bump map with parallax fragment program 
fragment_program Examples/OffsetMappingFP/HLSL hlsl
{ 
   source OffsetMapping.cg
   entry_point main_fp
   target ps_2_0
} 

// Bump map with Parallax offset vertex program, support for this is required 
vertex_program Examples/OffsetMappingVP/GLSLES glsles
{ 
    source OffsetMappingVp.glsl
} 

// Bump map with parallax fragment program 
fragment_program Examples/OffsetMappingFP/GLSLES glsles
{ 
    source OffsetMappingFp.glsl
	default_params
	{
		// assign samplers as required by GLSL
		param_named normalHeightMap int 0
		param_named diffuseMap int 1
	}
}

// Bump map with Parallax offset vertex program, support for this is required 
vertex_program Examples/OffsetMappingVP/GLSL glsl
{ 
    source OffsetMappingVp.glsl
}

// Bump map with parallax fragment program 
fragment_program Examples/OffsetMappingFP/GLSL glsl
{ 
    source OffsetMappingFp.glsl
    default_params
    {
        // assign samplers as required by GLSL
        param_named normalHeightMap int 0
        param_named diffuseMap int 1
    }
}

vertex_program Examples/OffsetMappingVP unified
{
	delegate Examples/OffsetMappingVP/GLSL
	delegate Examples/OffsetMappingVP/GLSLES
	delegate Examples/OffsetMappingVP/HLSL
}

fragment_program Examples/OffsetMappingFP unified
{
	delegate Examples/OffsetMappingFP/GLSL
	delegate Examples/OffsetMappingFP/GLSLES
	delegate Examples/OffsetMappingFP/HLSL
}

material Examples/OffsetMapping/Specular 
{
   technique
   {
       // ambient / depth
       pass
       {
           illumination_stage ambient
           diffuse 0 0 0
           // might be needed for D3D) & GL: depth_bias -1 -1
       }
       // do the lighting and bump mapping with parallax pass 
       pass 
       {
           illumination_stage per_light
           iteration once_per_light
           scene_blend add

           // Vertex program reference 
           vertex_program_ref Examples/OffsetMappingVP 
           { 
              param_named_auto lightPosition light_position_object_space 0 
              param_named_auto eyePosition camera_position_object_space 
              param_named_auto worldViewProj worldviewproj_matrix 
           } 

           // Fragment program 
           fragment_program_ref Examples/OffsetMappingFP
           { 
              param_named_auto lightDiffuse light_diffuse_colour 0 
              param_named_auto lightSpecular light_specular_colour 0 
              // Parallax Height scale and bias 
              param_named scaleBias float4 0.04 -0.02 1 0 
           } 

           // Normal + height(alpha) map 
           texture_unit 
           { 
              texture rockwall_NH.tga
           } 

           // Base diffuse texture map 
           texture_unit 
           { 
              texture rockwall.tga
           } 
       }
   }
}



// Single-pass offset mapping with shadows
vertex_program Examples/OffsetMappingIntegratedShadowsVPhlsl hlsl 
{ 
   source OffsetMapping.hlsl
   entry_point integratedshadows_vp 
   target vs_2_0
} 
vertex_program Examples/OffsetMappingIntegratedShadowsVPglsl glsl 
{ 
   source OffsetMappingShadowsVp.glsl
   default_params
   {
        param_named_auto worldViewProj worldviewproj_matrix 
   }
} 

vertex_program Examples/OffsetMappingIntegratedShadowsVPglsles glsles
{ 
   source OffsetMappingShadowsVp.glsl
} 

// Single-pass offset mapping with shadows
fragment_program Examples/OffsetMappingIntegratedShadowsFPhlsl hlsl
{ 
   source OffsetMapping.hlsl
   entry_point integratedshadows_fp
   target ps_2_0
} 
fragment_program Examples/OffsetMappingIntegratedShadowsFPglsl glsl
{
	source OffsetMappingShadowsFp.glsl
	default_params
	{
		// assign samplers as required by GLSL
		param_named normalHeightMap int 0
		param_named diffuseMap int 1
		param_named shadowMap1 int 2
		param_named shadowMap2 int 3
	}
}
fragment_program Examples/OffsetMappingIntegratedShadowsFPglsles glsles
{
	source OffsetMappingShadowsFp.glsl
	default_params
	{
		// assign samplers as required by GLSL ES
		param_named normalHeightMap int 0
		param_named diffuseMap int 1
		param_named shadowMap1 int 2
		param_named shadowMap2 int 3
	}
}
// Single-pass offset mapping with shadows
vertex_program Examples/OffsetMappingIntegratedShadowsVP unified
{
	delegate Examples/OffsetMappingIntegratedShadowsVPhlsl
	delegate Examples/OffsetMappingIntegratedShadowsVPglsl
	delegate Examples/OffsetMappingIntegratedShadowsVPglsles
}
// Single-pass offset mapping with shadows
fragment_program Examples/OffsetMappingIntegratedShadowsFP unified
{
	delegate Examples/OffsetMappingIntegratedShadowsFPhlsl
	delegate Examples/OffsetMappingIntegratedShadowsFPglsl
	delegate Examples/OffsetMappingIntegratedShadowsFPglsles
}



material Examples/OffsetMapping/IntegratedShadows 
{ 

   technique 
   { 
      // do the lighting  and bump mapping with parallax pass 
      pass 
      { 
       
         // Vertex program reference 
         vertex_program_ref Examples/OffsetMappingIntegratedShadowsVP
         { 
            param_named_auto lightPosition light_position_object_space 0
            param_named_auto eyePosition camera_position_object_space 
            param_named_auto worldViewProj worldviewproj_matrix 
			param_named_auto spotDirection light_direction_object_space 0

            param_named_auto lightPosition1 light_position_object_space 1
			param_named_auto spotDirection1 light_direction_object_space 1
			// shadow texture projections
			param_named_auto worldMatrix world_matrix
			param_named_auto texViewProj1 texture_viewproj_matrix 0
			param_named_auto texViewProj2 texture_viewproj_matrix 1
         } 

         // Fragment program 
         fragment_program_ref Examples/OffsetMappingIntegratedShadowsFP
         { 
            param_named_auto lightDiffuse light_diffuse_colour 0 
			param_named_auto spotParams spotlight_params 0

			param_named_auto lightDiffuse1 light_diffuse_colour 1
			param_named_auto spotParams1 spotlight_params 1
            // Parallax Height scale and bias 
            param_named scaleBias float4 0.04 -0.02 1 0 
         } 
          
         // Normal + height(alpha) map 
         texture_unit 
         { 
            texture rockwall_NH.tga
            tex_coord_set 0 
         } 

         // Base diffuse texture map 
         texture_unit 
         { 
            texture rockwall.tga
            tex_coord_set 1 
         } 

		 // shadowmap 1
		 texture_unit
		 {
		 	content_type shadow
		 }
		 // shadowmap 2
		 texture_unit
		 {
		 	content_type shadow
		 }
      } 
   }
}
